Hereâ€™s a comprehensive and structured prompt you can give to the Replit Agent to guide the full migration from Cloudinary to Replit Object Storage, while cleaning up all outdated or redundant code:

â¸»

Prompt for Replit Agent

Weâ€™re currently using Cloudinary for image uploads and storage in our app, but we want to migrate fully to Replit Object Storage. Your job is to rebuild the entire image handling pipeline to use Replit Object Storage, and remove all Cloudinary-related code. The new solution should maintain the existing functionality, adhere to modern best practices, and keep the codebase clean and type-safe.

ðŸ”§ Current System Overview

Our image handling is implemented in:
	â€¢	ImageUpload.tsx (React)
	â€¢	Drag-and-drop and file selection
	â€¢	Single & multiple image upload
	â€¢	Validates file type (image-only) and size (max 5MB)
	â€¢	Shows upload progress
	â€¢	Displays image previews / gallery for multiple uploads
	â€¢	Upload endpoint: POST /api/upload/{entityType}/{entityId}
	â€¢	Uses multer with memoryStorage
	â€¢	Uploads files to Cloudinary via uploadToCloudinary()
	â€¢	Stores returned Cloudinary URL in the database (PostgreSQL via Prisma)

ðŸ“¦ What Needs to Change

Core goal: Replace Cloudinary with Replit Object Storage and remove all Cloudinary-specific code.

âœ… Tasks

Frontend (ImageUpload.tsx)
	â€¢	Keep the current drag-and-drop, validation, preview, and progress functionality.
	â€¢	After upload, display image URLs from Replit Object Storage instead of Cloudinary.

Backend API (/api/upload/[entityType]/[entityId])
	â€¢	Replace uploadToCloudinary() with logic to upload to Replit Object Storage.
	â€¢	Use multer as is (unless better Replit-native middleware exists).
	â€¢	Use Replitâ€™s official Object Storage SDK/API to upload and get public image URLs.
	â€¢	Save these image URLs to the database exactly like we did with Cloudinary.

Database
	â€¢	No schema change needed unless Replit URLs require additional metadata (e.g., file ID, bucket info). If so, update the Prisma schema accordingly and migrate.

Cleanup
	â€¢	Completely remove:
	â€¢	uploadToCloudinary function
	â€¢	Any Cloudinary SDK imports or env variables
	â€¢	References to Cloudinary in tsconfig, scripts, or docs
	â€¢	Replace or rename variables/functions like cloudinaryUrl â†’ imageUrl or objectStorageUrl for clarity.

ðŸ§ª Requirements
	â€¢	TypeScript-safe
	â€¢	Clear error handling at each step
	â€¢	Clean, readable, modular code (no leftovers or commented-out Cloudinary code)
	â€¢	Fully working image gallery support for multi-image uploads
	â€¢	Replit Object Storage must be the only storage mechanism used after this

ðŸ§  Optional Enhancements (if time allows)
	â€¢	Add automatic filename normalization or timestamping to avoid collisions
	â€¢	Ensure public URLs are safely sharable and CDN-optimized if supported by Replit
	â€¢	Make uploads resumable or retryable if Replit API allows it

â¸»

Let me know if youâ€™d like me to generate example code snippets or a checklist to help you track the migration process!